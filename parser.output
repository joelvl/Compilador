Terminals unused in grammar

   CHAR_VALUE
   INVALID_CHAR
   INVALID_STRING


State 65 conflicts: 1 shift/reduce
State 108 conflicts: 1 shift/reduce
State 109 conflicts: 1 shift/reduce
State 110 conflicts: 2 shift/reduce
State 111 conflicts: 4 shift/reduce
State 112 conflicts: 2 shift/reduce
State 113 conflicts: 3 shift/reduce
State 116 conflicts: 1 shift/reduce
State 132 conflicts: 16 reduce/reduce
State 133 conflicts: 16 reduce/reduce
State 170 conflicts: 1 shift/reduce, 2 reduce/reduce
State 171 conflicts: 4 reduce/reduce
State 172 conflicts: 5 reduce/reduce
State 173 conflicts: 7 reduce/reduce
State 174 conflicts: 7 reduce/reduce
State 175 conflicts: 11 reduce/reduce
State 176 conflicts: 11 reduce/reduce
State 177 conflicts: 11 reduce/reduce
State 178 conflicts: 11 reduce/reduce
State 179 conflicts: 13 reduce/reduce
State 180 conflicts: 13 reduce/reduce
State 181 conflicts: 16 reduce/reduce
State 182 conflicts: 16 reduce/reduce
State 183 conflicts: 16 reduce/reduce
State 184 conflicts: 1 shift/reduce, 2 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: decls

    2 decls: decl
    3      | decls decl

    4 decl: variableDecl
    5     | functionDecl
    6     | classDecl
    7     | interfaceDecl

    8 optArray: %empty
    9         | SBO SBC

   10 identifiers: IDENTIFIER
   11            | identifiers IDENTIFIER

   12 functionDecl: type IDENTIFIER BO formals BC stmtBlock
   13             | VOID IDENTIFIER BO formals BC stmtBlock

   14 formals: variable
   15        | formals COMMA variable

   16 classDecl: CLASS IDENTIFIER optExtends optImplements CBO fields CBC

   17 optExtends: EXTENDS IDENTIFIER
   18           | %empty

   19 optImplements: IMPLEMENTS identifiers
   20              | %empty

   21 fields: %empty
   22       | fields field

   23 field: variableDecl
   24      | functionDecl

   25 interfaceDecl: INTERFACE IDENTIFIER CBO prototype CBC

   26 prototype: %empty
   27          | type IDENTIFIER BO formals BC SEMICOLON
   28          | VOID IDENTIFIER BO formals BC SEMICOLON

   29 variableDecls: %empty
   30              | variableDecls variableDecl

   31 stmts: %empty
   32      | stmts stmt

   33 stmtBlock: CBO variableDecls stmts CBC

   34 variableDecl: variable SEMICOLON

   35 variable: type IDENTIFIER

   36 type: INT optArray
   37     | DOUBLE optArray
   38     | BOOL optArray
   39     | STRING optArray
   40     | IDENTIFIER optArray

   41 stmt: ifStmt
   42     | expression SEMICOLON
   43     | whileStmt
   44     | forStmt
   45     | breakStmt
   46     | returnStmt
   47     | printStmt
   48     | stmtBlock

   49 ifStmt: IF BO expression BC stmtBlock optElse

   50 optElse: %empty
   51        | ELSE stmtBlock

   52 whileStmt: WHILE BO expression BC stmtBlock

   53 forStmt: FOR BO expression SEMICOLON expression SEMICOLON expression BC stmtBlock

   54 returnStmt: RETURN expression SEMICOLON

   55 breakStmt: BREAK SEMICOLON

   56 printStmt: PRINT BO expressionList BC SEMICOLON

   57 expressionList: expression
   58               | expressionList COMMA expression

   59 expression: expressionA

   60 expressionA: expressionA EQUAL expressionA
   61            | expressionB

   62 expressionB: expressionB OR expressionC
   63            | expressionC

   64 expressionC: expressionC AND expressionD
   65            | expressionD

   66 expressionD: expressionD EQUALEQUAL expressionE
   67            | expressionD NOTEQUAL expressionE
   68            | expressionE

   69 expressionE: expressionE LESS expressionF
   70            | expressionE LESSEQUAL expressionF
   71            | expressionE GREATER expressionF
   72            | expressionE GREATEREQUAL expressionF
   73            | expressionF

   74 expressionF: expressionF PLUS expressionG
   75            | expressionF MINUS expressionG
   76            | expressionG

   77 expressionG: expressionG MUL expressionH
   78            | expressionG DIV expressionH
   79            | expressionG MOD expressionH
   80            | expressionH

   81 expressionH: NOT expressionH
   82            | MINUS expressionH
   83            | expressionI

   84 expressionI: lValue EQUAL expressionA
   85            | lValue
   86            | constant
   87            | call
   88            | READINTEGER BO BC
   89            | READLINE BO BC
   90            | NEW BO IDENTIFIER BC
   91            | NEWARRAY BO expressionA COMMA type BC
   92            | THIS
   93            | BO expressionA BC

   94 lValue: IDENTIFIER
   95       | expression DOT IDENTIFIER
   96       | expression SBO expression SBC

   97 call: IDENTIFIER BO actualList BC
   98     | expression DOT IDENTIFIER BO actualList BC

   99 actualList: actuals
  100           | %empty

  101 actuals: expression
  102        | actuals COMMA expression

  103 constant: INT_VALUE
  104         | DOUBLE_VALUE
  105         | _TRUE
  106         | _FALSE
  107         | STRING_VALUE
  108         | _NULL


Terminals, with rules where they appear

$end (0) 0
error (256)
VOID (258) 13 28
INT (259) 36
DOUBLE (260) 37
BOOL (261) 38
STRING (262) 39
CLASS (263) 16
INTERFACE (264) 25
_NULL (265) 108
THIS (266) 92
EXTENDS (267) 17
IMPLEMENTS (268) 19
FOR (269) 53
WHILE (270) 52
IF (271) 49
ELSE (272) 51
RETURN (273) 54
BREAK (274) 55
NEW (275) 90
NEWARRAY (276) 91
PRINT (277) 56
READINTEGER (278) 88
READLINE (279) 89
_TRUE (280) 105
_FALSE (281) 106
PLUS (282) 74
MINUS (283) 75 82
MUL (284) 77
DIV (285) 78
MOD (286) 79
LESS (287) 69
LESSEQUAL (288) 70
GREATER (289) 71
GREATEREQUAL (290) 72
EQUALEQUAL (291) 66
EQUAL (292) 60 84
NOTEQUAL (293) 67
AND (294) 64
OR (295) 62
NOT (296) 81
SEMICOLON (297) 27 28 34 42 53 54 55 56
COMMA (298) 15 58 91 102
DOT (299) 95 98
SBO (300) 9 96
SBC (301) 9 96
BO (302) 12 13 27 28 49 52 53 56 88 89 90 91 93 97 98
BC (303) 12 13 27 28 49 52 53 56 88 89 90 91 93 97 98
CBO (304) 16 25 33
CBC (305) 16 25 33
INT_VALUE <ival> (306) 103
DOUBLE_VALUE <dval> (307) 104
CHAR_VALUE <cval> (308)
INVALID_CHAR <cval> (309)
STRING_VALUE <sval> (310) 107
INVALID_STRING <sval> (311)
IDENTIFIER <sval> (312) 10 11 12 13 16 17 25 27 28 35 40 90 94 95 97
    98


Nonterminals, with rules where they appear

$accept (58)
    on left: 0
program (59)
    on left: 1, on right: 0
decls (60)
    on left: 2 3, on right: 1 3
decl (61)
    on left: 4 5 6 7, on right: 2 3
optArray (62)
    on left: 8 9, on right: 36 37 38 39 40
identifiers (63)
    on left: 10 11, on right: 11 19
functionDecl (64)
    on left: 12 13, on right: 5 24
formals (65)
    on left: 14 15, on right: 12 13 15 27 28
classDecl (66)
    on left: 16, on right: 6
optExtends (67)
    on left: 17 18, on right: 16
optImplements (68)
    on left: 19 20, on right: 16
fields (69)
    on left: 21 22, on right: 16 22
field (70)
    on left: 23 24, on right: 22
interfaceDecl (71)
    on left: 25, on right: 7
prototype (72)
    on left: 26 27 28, on right: 25
variableDecls (73)
    on left: 29 30, on right: 30 33
stmts (74)
    on left: 31 32, on right: 32 33
stmtBlock (75)
    on left: 33, on right: 12 13 48 49 51 52 53
variableDecl (76)
    on left: 34, on right: 4 23 30
variable (77)
    on left: 35, on right: 14 15 34
type (78)
    on left: 36 37 38 39 40, on right: 12 27 35 91
stmt (79)
    on left: 41 42 43 44 45 46 47 48, on right: 32
ifStmt (80)
    on left: 49, on right: 41
optElse (81)
    on left: 50 51, on right: 49
whileStmt (82)
    on left: 52, on right: 43
forStmt (83)
    on left: 53, on right: 44
returnStmt (84)
    on left: 54, on right: 46
breakStmt (85)
    on left: 55, on right: 45
printStmt (86)
    on left: 56, on right: 47
expressionList (87)
    on left: 57 58, on right: 56 58
expression (88)
    on left: 59, on right: 42 49 52 53 54 57 58 95 96 98 101 102
expressionA (89)
    on left: 60 61, on right: 59 60 84 91 93
expressionB (90)
    on left: 62 63, on right: 61 62
expressionC (91)
    on left: 64 65, on right: 62 63 64
expressionD (92)
    on left: 66 67 68, on right: 64 65 66 67
expressionE (93)
    on left: 69 70 71 72 73, on right: 66 67 68 69 70 71 72
expressionF (94)
    on left: 74 75 76, on right: 69 70 71 72 73 74 75
expressionG (95)
    on left: 77 78 79 80, on right: 74 75 76 77 78 79
expressionH (96)
    on left: 81 82 83, on right: 77 78 79 80 81 82
expressionI (97)
    on left: 84 85 86 87 88 89 90 91 92 93, on right: 83
lValue (98)
    on left: 94 95 96, on right: 84 85
call (99)
    on left: 97 98, on right: 87
actualList (100)
    on left: 99 100, on right: 97 98
actuals (101)
    on left: 101 102, on right: 99 102
constant (102)
    on left: 103 104 105 106 107 108, on right: 86


State 0

    0 $accept: . program $end

    VOID        shift, and go to state 1
    INT         shift, and go to state 2
    DOUBLE      shift, and go to state 3
    BOOL        shift, and go to state 4
    STRING      shift, and go to state 5
    CLASS       shift, and go to state 6
    INTERFACE   shift, and go to state 7
    IDENTIFIER  shift, and go to state 8

    program        go to state 9
    decls          go to state 10
    decl           go to state 11
    functionDecl   go to state 12
    classDecl      go to state 13
    interfaceDecl  go to state 14
    variableDecl   go to state 15
    variable       go to state 16
    type           go to state 17


State 1

   13 functionDecl: VOID . IDENTIFIER BO formals BC stmtBlock

    IDENTIFIER  shift, and go to state 18


State 2

   36 type: INT . optArray

    SBO  shift, and go to state 19

    $default  reduce using rule 8 (optArray)

    optArray  go to state 20


State 3

   37 type: DOUBLE . optArray

    SBO  shift, and go to state 19

    $default  reduce using rule 8 (optArray)

    optArray  go to state 21


State 4

   38 type: BOOL . optArray

    SBO  shift, and go to state 19

    $default  reduce using rule 8 (optArray)

    optArray  go to state 22


State 5

   39 type: STRING . optArray

    SBO  shift, and go to state 19

    $default  reduce using rule 8 (optArray)

    optArray  go to state 23


State 6

   16 classDecl: CLASS . IDENTIFIER optExtends optImplements CBO fields CBC

    IDENTIFIER  shift, and go to state 24


State 7

   25 interfaceDecl: INTERFACE . IDENTIFIER CBO prototype CBC

    IDENTIFIER  shift, and go to state 25


State 8

   40 type: IDENTIFIER . optArray

    SBO  shift, and go to state 19

    $default  reduce using rule 8 (optArray)

    optArray  go to state 26


State 9

    0 $accept: program . $end

    $end  shift, and go to state 27


State 10

    1 program: decls .
    3 decls: decls . decl

    VOID        shift, and go to state 1
    INT         shift, and go to state 2
    DOUBLE      shift, and go to state 3
    BOOL        shift, and go to state 4
    STRING      shift, and go to state 5
    CLASS       shift, and go to state 6
    INTERFACE   shift, and go to state 7
    IDENTIFIER  shift, and go to state 8

    $default  reduce using rule 1 (program)

    decl           go to state 28
    functionDecl   go to state 12
    classDecl      go to state 13
    interfaceDecl  go to state 14
    variableDecl   go to state 15
    variable       go to state 16
    type           go to state 17


State 11

    2 decls: decl .

    $default  reduce using rule 2 (decls)


State 12

    5 decl: functionDecl .

    $default  reduce using rule 5 (decl)


State 13

    6 decl: classDecl .

    $default  reduce using rule 6 (decl)


State 14

    7 decl: interfaceDecl .

    $default  reduce using rule 7 (decl)


State 15

    4 decl: variableDecl .

    $default  reduce using rule 4 (decl)


State 16

   34 variableDecl: variable . SEMICOLON

    SEMICOLON  shift, and go to state 29


State 17

   12 functionDecl: type . IDENTIFIER BO formals BC stmtBlock
   35 variable: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 30


State 18

   13 functionDecl: VOID IDENTIFIER . BO formals BC stmtBlock

    BO  shift, and go to state 31


State 19

    9 optArray: SBO . SBC

    SBC  shift, and go to state 32


State 20

   36 type: INT optArray .

    $default  reduce using rule 36 (type)


State 21

   37 type: DOUBLE optArray .

    $default  reduce using rule 37 (type)


State 22

   38 type: BOOL optArray .

    $default  reduce using rule 38 (type)


State 23

   39 type: STRING optArray .

    $default  reduce using rule 39 (type)


State 24

   16 classDecl: CLASS IDENTIFIER . optExtends optImplements CBO fields CBC

    EXTENDS  shift, and go to state 33

    $default  reduce using rule 18 (optExtends)

    optExtends  go to state 34


State 25

   25 interfaceDecl: INTERFACE IDENTIFIER . CBO prototype CBC

    CBO  shift, and go to state 35


State 26

   40 type: IDENTIFIER optArray .

    $default  reduce using rule 40 (type)


State 27

    0 $accept: program $end .

    $default  accept


State 28

    3 decls: decls decl .

    $default  reduce using rule 3 (decls)


State 29

   34 variableDecl: variable SEMICOLON .

    $default  reduce using rule 34 (variableDecl)


State 30

   12 functionDecl: type IDENTIFIER . BO formals BC stmtBlock
   35 variable: type IDENTIFIER .

    BO  shift, and go to state 36

    $default  reduce using rule 35 (variable)


State 31

   13 functionDecl: VOID IDENTIFIER BO . formals BC stmtBlock

    INT         shift, and go to state 2
    DOUBLE      shift, and go to state 3
    BOOL        shift, and go to state 4
    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 8

    formals   go to state 37
    variable  go to state 38
    type      go to state 39


State 32

    9 optArray: SBO SBC .

    $default  reduce using rule 9 (optArray)


State 33

   17 optExtends: EXTENDS . IDENTIFIER

    IDENTIFIER  shift, and go to state 40


State 34

   16 classDecl: CLASS IDENTIFIER optExtends . optImplements CBO fields CBC

    IMPLEMENTS  shift, and go to state 41

    $default  reduce using rule 20 (optImplements)

    optImplements  go to state 42


State 35

   25 interfaceDecl: INTERFACE IDENTIFIER CBO . prototype CBC

    VOID        shift, and go to state 43
    INT         shift, and go to state 2
    DOUBLE      shift, and go to state 3
    BOOL        shift, and go to state 4
    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 8

    $default  reduce using rule 26 (prototype)

    prototype  go to state 44
    type       go to state 45


State 36

   12 functionDecl: type IDENTIFIER BO . formals BC stmtBlock

    INT         shift, and go to state 2
    DOUBLE      shift, and go to state 3
    BOOL        shift, and go to state 4
    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 8

    formals   go to state 46
    variable  go to state 38
    type      go to state 39


State 37

   13 functionDecl: VOID IDENTIFIER BO formals . BC stmtBlock
   15 formals: formals . COMMA variable

    COMMA  shift, and go to state 47
    BC     shift, and go to state 48


State 38

   14 formals: variable .

    $default  reduce using rule 14 (formals)


State 39

   35 variable: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 49


State 40

   17 optExtends: EXTENDS IDENTIFIER .

    $default  reduce using rule 17 (optExtends)


State 41

   19 optImplements: IMPLEMENTS . identifiers

    IDENTIFIER  shift, and go to state 50

    identifiers  go to state 51


State 42

   16 classDecl: CLASS IDENTIFIER optExtends optImplements . CBO fields CBC

    CBO  shift, and go to state 52


State 43

   28 prototype: VOID . IDENTIFIER BO formals BC SEMICOLON

    IDENTIFIER  shift, and go to state 53


State 44

   25 interfaceDecl: INTERFACE IDENTIFIER CBO prototype . CBC

    CBC  shift, and go to state 54


State 45

   27 prototype: type . IDENTIFIER BO formals BC SEMICOLON

    IDENTIFIER  shift, and go to state 55


State 46

   12 functionDecl: type IDENTIFIER BO formals . BC stmtBlock
   15 formals: formals . COMMA variable

    COMMA  shift, and go to state 47
    BC     shift, and go to state 56


State 47

   15 formals: formals COMMA . variable

    INT         shift, and go to state 2
    DOUBLE      shift, and go to state 3
    BOOL        shift, and go to state 4
    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 8

    variable  go to state 57
    type      go to state 39


State 48

   13 functionDecl: VOID IDENTIFIER BO formals BC . stmtBlock

    CBO  shift, and go to state 58

    stmtBlock  go to state 59


State 49

   35 variable: type IDENTIFIER .

    $default  reduce using rule 35 (variable)


State 50

   10 identifiers: IDENTIFIER .

    $default  reduce using rule 10 (identifiers)


State 51

   11 identifiers: identifiers . IDENTIFIER
   19 optImplements: IMPLEMENTS identifiers .

    IDENTIFIER  shift, and go to state 60

    $default  reduce using rule 19 (optImplements)


State 52

   16 classDecl: CLASS IDENTIFIER optExtends optImplements CBO . fields CBC

    $default  reduce using rule 21 (fields)

    fields  go to state 61


State 53

   28 prototype: VOID IDENTIFIER . BO formals BC SEMICOLON

    BO  shift, and go to state 62


State 54

   25 interfaceDecl: INTERFACE IDENTIFIER CBO prototype CBC .

    $default  reduce using rule 25 (interfaceDecl)


State 55

   27 prototype: type IDENTIFIER . BO formals BC SEMICOLON

    BO  shift, and go to state 63


State 56

   12 functionDecl: type IDENTIFIER BO formals BC . stmtBlock

    CBO  shift, and go to state 58

    stmtBlock  go to state 64


State 57

   15 formals: formals COMMA variable .

    $default  reduce using rule 15 (formals)


State 58

   33 stmtBlock: CBO . variableDecls stmts CBC

    $default  reduce using rule 29 (variableDecls)

    variableDecls  go to state 65


State 59

   13 functionDecl: VOID IDENTIFIER BO formals BC stmtBlock .

    $default  reduce using rule 13 (functionDecl)


State 60

   11 identifiers: identifiers IDENTIFIER .

    $default  reduce using rule 11 (identifiers)


State 61

   16 classDecl: CLASS IDENTIFIER optExtends optImplements CBO fields . CBC
   22 fields: fields . field

    VOID        shift, and go to state 1
    INT         shift, and go to state 2
    DOUBLE      shift, and go to state 3
    BOOL        shift, and go to state 4
    STRING      shift, and go to state 5
    CBC         shift, and go to state 66
    IDENTIFIER  shift, and go to state 8

    functionDecl  go to state 67
    field         go to state 68
    variableDecl  go to state 69
    variable      go to state 16
    type          go to state 17


State 62

   28 prototype: VOID IDENTIFIER BO . formals BC SEMICOLON

    INT         shift, and go to state 2
    DOUBLE      shift, and go to state 3
    BOOL        shift, and go to state 4
    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 8

    formals   go to state 70
    variable  go to state 38
    type      go to state 39


State 63

   27 prototype: type IDENTIFIER BO . formals BC SEMICOLON

    INT         shift, and go to state 2
    DOUBLE      shift, and go to state 3
    BOOL        shift, and go to state 4
    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 8

    formals   go to state 71
    variable  go to state 38
    type      go to state 39


State 64

   12 functionDecl: type IDENTIFIER BO formals BC stmtBlock .

    $default  reduce using rule 12 (functionDecl)


State 65

   30 variableDecls: variableDecls . variableDecl
   33 stmtBlock: CBO variableDecls . stmts CBC

    INT         shift, and go to state 2
    DOUBLE      shift, and go to state 3
    BOOL        shift, and go to state 4
    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 8

    IDENTIFIER  [reduce using rule 31 (stmts)]
    $default    reduce using rule 31 (stmts)

    stmts         go to state 72
    variableDecl  go to state 73
    variable      go to state 16
    type          go to state 39


State 66

   16 classDecl: CLASS IDENTIFIER optExtends optImplements CBO fields CBC .

    $default  reduce using rule 16 (classDecl)


State 67

   24 field: functionDecl .

    $default  reduce using rule 24 (field)


State 68

   22 fields: fields field .

    $default  reduce using rule 22 (fields)


State 69

   23 field: variableDecl .

    $default  reduce using rule 23 (field)


State 70

   15 formals: formals . COMMA variable
   28 prototype: VOID IDENTIFIER BO formals . BC SEMICOLON

    COMMA  shift, and go to state 47
    BC     shift, and go to state 74


State 71

   15 formals: formals . COMMA variable
   27 prototype: type IDENTIFIER BO formals . BC SEMICOLON

    COMMA  shift, and go to state 47
    BC     shift, and go to state 75


State 72

   32 stmts: stmts . stmt
   33 stmtBlock: CBO variableDecls stmts . CBC

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    FOR           shift, and go to state 78
    WHILE         shift, and go to state 79
    IF            shift, and go to state 80
    RETURN        shift, and go to state 81
    BREAK         shift, and go to state 82
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    PRINT         shift, and go to state 85
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    CBO           shift, and go to state 58
    CBC           shift, and go to state 93
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    stmtBlock    go to state 98
    stmt         go to state 99
    ifStmt       go to state 100
    whileStmt    go to state 101
    forStmt      go to state 102
    returnStmt   go to state 103
    breakStmt    go to state 104
    printStmt    go to state 105
    expression   go to state 106
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 112
    expressionG  go to state 113
    expressionH  go to state 114
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 73

   30 variableDecls: variableDecls variableDecl .

    $default  reduce using rule 30 (variableDecls)


State 74

   28 prototype: VOID IDENTIFIER BO formals BC . SEMICOLON

    SEMICOLON  shift, and go to state 119


State 75

   27 prototype: type IDENTIFIER BO formals BC . SEMICOLON

    SEMICOLON  shift, and go to state 120


State 76

  108 constant: _NULL .

    $default  reduce using rule 108 (constant)


State 77

   92 expressionI: THIS .

    $default  reduce using rule 92 (expressionI)


State 78

   53 forStmt: FOR . BO expression SEMICOLON expression SEMICOLON expression BC stmtBlock

    BO  shift, and go to state 121


State 79

   52 whileStmt: WHILE . BO expression BC stmtBlock

    BO  shift, and go to state 122


State 80

   49 ifStmt: IF . BO expression BC stmtBlock optElse

    BO  shift, and go to state 123


State 81

   54 returnStmt: RETURN . expression SEMICOLON

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 124
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 112
    expressionG  go to state 113
    expressionH  go to state 114
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 82

   55 breakStmt: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 125


State 83

   90 expressionI: NEW . BO IDENTIFIER BC

    BO  shift, and go to state 126


State 84

   91 expressionI: NEWARRAY . BO expressionA COMMA type BC

    BO  shift, and go to state 127


State 85

   56 printStmt: PRINT . BO expressionList BC SEMICOLON

    BO  shift, and go to state 128


State 86

   88 expressionI: READINTEGER . BO BC

    BO  shift, and go to state 129


State 87

   89 expressionI: READLINE . BO BC

    BO  shift, and go to state 130


State 88

  105 constant: _TRUE .

    $default  reduce using rule 105 (constant)


State 89

  106 constant: _FALSE .

    $default  reduce using rule 106 (constant)


State 90

   82 expressionH: MINUS . expressionH

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 131
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 112
    expressionG  go to state 113
    expressionH  go to state 132
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 91

   81 expressionH: NOT . expressionH

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 131
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 112
    expressionG  go to state 113
    expressionH  go to state 133
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 92

   93 expressionI: BO . expressionA BC

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 131
    expressionA  go to state 134
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 112
    expressionG  go to state 113
    expressionH  go to state 114
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 93

   33 stmtBlock: CBO variableDecls stmts CBC .

    $default  reduce using rule 33 (stmtBlock)


State 94

  103 constant: INT_VALUE .

    $default  reduce using rule 103 (constant)


State 95

  104 constant: DOUBLE_VALUE .

    $default  reduce using rule 104 (constant)


State 96

  107 constant: STRING_VALUE .

    $default  reduce using rule 107 (constant)


State 97

   94 lValue: IDENTIFIER .
   97 call: IDENTIFIER . BO actualList BC

    BO  shift, and go to state 135

    $default  reduce using rule 94 (lValue)


State 98

   48 stmt: stmtBlock .

    $default  reduce using rule 48 (stmt)


State 99

   32 stmts: stmts stmt .

    $default  reduce using rule 32 (stmts)


State 100

   41 stmt: ifStmt .

    $default  reduce using rule 41 (stmt)


State 101

   43 stmt: whileStmt .

    $default  reduce using rule 43 (stmt)


State 102

   44 stmt: forStmt .

    $default  reduce using rule 44 (stmt)


State 103

   46 stmt: returnStmt .

    $default  reduce using rule 46 (stmt)


State 104

   45 stmt: breakStmt .

    $default  reduce using rule 45 (stmt)


State 105

   47 stmt: printStmt .

    $default  reduce using rule 47 (stmt)


State 106

   42 stmt: expression . SEMICOLON
   95 lValue: expression . DOT IDENTIFIER
   96       | expression . SBO expression SBC
   98 call: expression . DOT IDENTIFIER BO actualList BC

    SEMICOLON  shift, and go to state 136
    DOT        shift, and go to state 137
    SBO        shift, and go to state 138


State 107

   59 expression: expressionA .
   60 expressionA: expressionA . EQUAL expressionA

    EQUAL  shift, and go to state 139

    $default  reduce using rule 59 (expression)


State 108

   61 expressionA: expressionB .
   62 expressionB: expressionB . OR expressionC

    OR  shift, and go to state 140

    OR        [reduce using rule 61 (expressionA)]
    $default  reduce using rule 61 (expressionA)


State 109

   63 expressionB: expressionC .
   64 expressionC: expressionC . AND expressionD

    AND  shift, and go to state 141

    AND       [reduce using rule 63 (expressionB)]
    $default  reduce using rule 63 (expressionB)


State 110

   65 expressionC: expressionD .
   66 expressionD: expressionD . EQUALEQUAL expressionE
   67            | expressionD . NOTEQUAL expressionE

    EQUALEQUAL  shift, and go to state 142
    NOTEQUAL    shift, and go to state 143

    EQUALEQUAL  [reduce using rule 65 (expressionC)]
    NOTEQUAL    [reduce using rule 65 (expressionC)]
    $default    reduce using rule 65 (expressionC)


State 111

   68 expressionD: expressionE .
   69 expressionE: expressionE . LESS expressionF
   70            | expressionE . LESSEQUAL expressionF
   71            | expressionE . GREATER expressionF
   72            | expressionE . GREATEREQUAL expressionF

    LESS          shift, and go to state 144
    LESSEQUAL     shift, and go to state 145
    GREATER       shift, and go to state 146
    GREATEREQUAL  shift, and go to state 147

    LESS          [reduce using rule 68 (expressionD)]
    LESSEQUAL     [reduce using rule 68 (expressionD)]
    GREATER       [reduce using rule 68 (expressionD)]
    GREATEREQUAL  [reduce using rule 68 (expressionD)]
    $default      reduce using rule 68 (expressionD)


State 112

   73 expressionE: expressionF .
   74 expressionF: expressionF . PLUS expressionG
   75            | expressionF . MINUS expressionG

    PLUS   shift, and go to state 148
    MINUS  shift, and go to state 149

    PLUS      [reduce using rule 73 (expressionE)]
    MINUS     [reduce using rule 73 (expressionE)]
    $default  reduce using rule 73 (expressionE)


State 113

   76 expressionF: expressionG .
   77 expressionG: expressionG . MUL expressionH
   78            | expressionG . DIV expressionH
   79            | expressionG . MOD expressionH

    MUL  shift, and go to state 150
    DIV  shift, and go to state 151
    MOD  shift, and go to state 152

    MUL       [reduce using rule 76 (expressionF)]
    DIV       [reduce using rule 76 (expressionF)]
    MOD       [reduce using rule 76 (expressionF)]
    $default  reduce using rule 76 (expressionF)


State 114

   80 expressionG: expressionH .

    $default  reduce using rule 80 (expressionG)


State 115

   83 expressionH: expressionI .

    $default  reduce using rule 83 (expressionH)


State 116

   84 expressionI: lValue . EQUAL expressionA
   85            | lValue .

    EQUAL  shift, and go to state 153

    EQUAL     [reduce using rule 85 (expressionI)]
    $default  reduce using rule 85 (expressionI)


State 117

   87 expressionI: call .

    $default  reduce using rule 87 (expressionI)


State 118

   86 expressionI: constant .

    $default  reduce using rule 86 (expressionI)


State 119

   28 prototype: VOID IDENTIFIER BO formals BC SEMICOLON .

    $default  reduce using rule 28 (prototype)


State 120

   27 prototype: type IDENTIFIER BO formals BC SEMICOLON .

    $default  reduce using rule 27 (prototype)


State 121

   53 forStmt: FOR BO . expression SEMICOLON expression SEMICOLON expression BC stmtBlock

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 154
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 112
    expressionG  go to state 113
    expressionH  go to state 114
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 122

   52 whileStmt: WHILE BO . expression BC stmtBlock

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 155
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 112
    expressionG  go to state 113
    expressionH  go to state 114
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 123

   49 ifStmt: IF BO . expression BC stmtBlock optElse

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 156
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 112
    expressionG  go to state 113
    expressionH  go to state 114
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 124

   54 returnStmt: RETURN expression . SEMICOLON
   95 lValue: expression . DOT IDENTIFIER
   96       | expression . SBO expression SBC
   98 call: expression . DOT IDENTIFIER BO actualList BC

    SEMICOLON  shift, and go to state 157
    DOT        shift, and go to state 137
    SBO        shift, and go to state 138


State 125

   55 breakStmt: BREAK SEMICOLON .

    $default  reduce using rule 55 (breakStmt)


State 126

   90 expressionI: NEW BO . IDENTIFIER BC

    IDENTIFIER  shift, and go to state 158


State 127

   91 expressionI: NEWARRAY BO . expressionA COMMA type BC

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 131
    expressionA  go to state 159
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 112
    expressionG  go to state 113
    expressionH  go to state 114
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 128

   56 printStmt: PRINT BO . expressionList BC SEMICOLON

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expressionList  go to state 160
    expression      go to state 161
    expressionA     go to state 107
    expressionB     go to state 108
    expressionC     go to state 109
    expressionD     go to state 110
    expressionE     go to state 111
    expressionF     go to state 112
    expressionG     go to state 113
    expressionH     go to state 114
    expressionI     go to state 115
    lValue          go to state 116
    call            go to state 117
    constant        go to state 118


State 129

   88 expressionI: READINTEGER BO . BC

    BC  shift, and go to state 162


State 130

   89 expressionI: READLINE BO . BC

    BC  shift, and go to state 163


State 131

   95 lValue: expression . DOT IDENTIFIER
   96       | expression . SBO expression SBC
   98 call: expression . DOT IDENTIFIER BO actualList BC

    DOT  shift, and go to state 137
    SBO  shift, and go to state 138


State 132

   80 expressionG: expressionH .
   82 expressionH: MINUS expressionH .

    PLUS          reduce using rule 80 (expressionG)
    PLUS          [reduce using rule 82 (expressionH)]
    MINUS         reduce using rule 80 (expressionG)
    MINUS         [reduce using rule 82 (expressionH)]
    MUL           reduce using rule 80 (expressionG)
    MUL           [reduce using rule 82 (expressionH)]
    DIV           reduce using rule 80 (expressionG)
    DIV           [reduce using rule 82 (expressionH)]
    MOD           reduce using rule 80 (expressionG)
    MOD           [reduce using rule 82 (expressionH)]
    LESS          reduce using rule 80 (expressionG)
    LESS          [reduce using rule 82 (expressionH)]
    LESSEQUAL     reduce using rule 80 (expressionG)
    LESSEQUAL     [reduce using rule 82 (expressionH)]
    GREATER       reduce using rule 80 (expressionG)
    GREATER       [reduce using rule 82 (expressionH)]
    GREATEREQUAL  reduce using rule 80 (expressionG)
    GREATEREQUAL  [reduce using rule 82 (expressionH)]
    EQUALEQUAL    reduce using rule 80 (expressionG)
    EQUALEQUAL    [reduce using rule 82 (expressionH)]
    EQUAL         reduce using rule 80 (expressionG)
    EQUAL         [reduce using rule 82 (expressionH)]
    NOTEQUAL      reduce using rule 80 (expressionG)
    NOTEQUAL      [reduce using rule 82 (expressionH)]
    AND           reduce using rule 80 (expressionG)
    AND           [reduce using rule 82 (expressionH)]
    OR            reduce using rule 80 (expressionG)
    OR            [reduce using rule 82 (expressionH)]
    SEMICOLON     reduce using rule 82 (expressionH)
    COMMA         reduce using rule 82 (expressionH)
    DOT           reduce using rule 80 (expressionG)
    DOT           [reduce using rule 82 (expressionH)]
    SBO           reduce using rule 80 (expressionG)
    SBO           [reduce using rule 82 (expressionH)]
    SBC           reduce using rule 82 (expressionH)
    BC            reduce using rule 82 (expressionH)
    $default      reduce using rule 80 (expressionG)


State 133

   80 expressionG: expressionH .
   81 expressionH: NOT expressionH .

    PLUS          reduce using rule 80 (expressionG)
    PLUS          [reduce using rule 81 (expressionH)]
    MINUS         reduce using rule 80 (expressionG)
    MINUS         [reduce using rule 81 (expressionH)]
    MUL           reduce using rule 80 (expressionG)
    MUL           [reduce using rule 81 (expressionH)]
    DIV           reduce using rule 80 (expressionG)
    DIV           [reduce using rule 81 (expressionH)]
    MOD           reduce using rule 80 (expressionG)
    MOD           [reduce using rule 81 (expressionH)]
    LESS          reduce using rule 80 (expressionG)
    LESS          [reduce using rule 81 (expressionH)]
    LESSEQUAL     reduce using rule 80 (expressionG)
    LESSEQUAL     [reduce using rule 81 (expressionH)]
    GREATER       reduce using rule 80 (expressionG)
    GREATER       [reduce using rule 81 (expressionH)]
    GREATEREQUAL  reduce using rule 80 (expressionG)
    GREATEREQUAL  [reduce using rule 81 (expressionH)]
    EQUALEQUAL    reduce using rule 80 (expressionG)
    EQUALEQUAL    [reduce using rule 81 (expressionH)]
    EQUAL         reduce using rule 80 (expressionG)
    EQUAL         [reduce using rule 81 (expressionH)]
    NOTEQUAL      reduce using rule 80 (expressionG)
    NOTEQUAL      [reduce using rule 81 (expressionH)]
    AND           reduce using rule 80 (expressionG)
    AND           [reduce using rule 81 (expressionH)]
    OR            reduce using rule 80 (expressionG)
    OR            [reduce using rule 81 (expressionH)]
    SEMICOLON     reduce using rule 81 (expressionH)
    COMMA         reduce using rule 81 (expressionH)
    DOT           reduce using rule 80 (expressionG)
    DOT           [reduce using rule 81 (expressionH)]
    SBO           reduce using rule 80 (expressionG)
    SBO           [reduce using rule 81 (expressionH)]
    SBC           reduce using rule 81 (expressionH)
    BC            reduce using rule 81 (expressionH)
    $default      reduce using rule 80 (expressionG)


State 134

   59 expression: expressionA .
   60 expressionA: expressionA . EQUAL expressionA
   93 expressionI: BO expressionA . BC

    EQUAL  shift, and go to state 139
    BC     shift, and go to state 164

    $default  reduce using rule 59 (expression)


State 135

   97 call: IDENTIFIER BO . actualList BC

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    $default  reduce using rule 100 (actualList)

    expression   go to state 165
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 112
    expressionG  go to state 113
    expressionH  go to state 114
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    actualList   go to state 166
    actuals      go to state 167
    constant     go to state 118


State 136

   42 stmt: expression SEMICOLON .

    $default  reduce using rule 42 (stmt)


State 137

   95 lValue: expression DOT . IDENTIFIER
   98 call: expression DOT . IDENTIFIER BO actualList BC

    IDENTIFIER  shift, and go to state 168


State 138

   96 lValue: expression SBO . expression SBC

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 169
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 112
    expressionG  go to state 113
    expressionH  go to state 114
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 139

   60 expressionA: expressionA EQUAL . expressionA

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 131
    expressionA  go to state 170
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 112
    expressionG  go to state 113
    expressionH  go to state 114
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 140

   62 expressionB: expressionB OR . expressionC

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 131
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 171
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 112
    expressionG  go to state 113
    expressionH  go to state 114
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 141

   64 expressionC: expressionC AND . expressionD

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 131
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 172
    expressionE  go to state 111
    expressionF  go to state 112
    expressionG  go to state 113
    expressionH  go to state 114
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 142

   66 expressionD: expressionD EQUALEQUAL . expressionE

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 131
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 173
    expressionF  go to state 112
    expressionG  go to state 113
    expressionH  go to state 114
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 143

   67 expressionD: expressionD NOTEQUAL . expressionE

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 131
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 174
    expressionF  go to state 112
    expressionG  go to state 113
    expressionH  go to state 114
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 144

   69 expressionE: expressionE LESS . expressionF

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 131
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 175
    expressionG  go to state 113
    expressionH  go to state 114
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 145

   70 expressionE: expressionE LESSEQUAL . expressionF

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 131
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 176
    expressionG  go to state 113
    expressionH  go to state 114
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 146

   71 expressionE: expressionE GREATER . expressionF

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 131
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 177
    expressionG  go to state 113
    expressionH  go to state 114
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 147

   72 expressionE: expressionE GREATEREQUAL . expressionF

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 131
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 178
    expressionG  go to state 113
    expressionH  go to state 114
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 148

   74 expressionF: expressionF PLUS . expressionG

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 131
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 112
    expressionG  go to state 179
    expressionH  go to state 114
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 149

   75 expressionF: expressionF MINUS . expressionG

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 131
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 112
    expressionG  go to state 180
    expressionH  go to state 114
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 150

   77 expressionG: expressionG MUL . expressionH

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 131
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 112
    expressionG  go to state 113
    expressionH  go to state 181
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 151

   78 expressionG: expressionG DIV . expressionH

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 131
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 112
    expressionG  go to state 113
    expressionH  go to state 182
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 152

   79 expressionG: expressionG MOD . expressionH

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 131
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 112
    expressionG  go to state 113
    expressionH  go to state 183
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 153

   84 expressionI: lValue EQUAL . expressionA

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 131
    expressionA  go to state 184
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 112
    expressionG  go to state 113
    expressionH  go to state 114
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 154

   53 forStmt: FOR BO expression . SEMICOLON expression SEMICOLON expression BC stmtBlock
   95 lValue: expression . DOT IDENTIFIER
   96       | expression . SBO expression SBC
   98 call: expression . DOT IDENTIFIER BO actualList BC

    SEMICOLON  shift, and go to state 185
    DOT        shift, and go to state 137
    SBO        shift, and go to state 138


State 155

   52 whileStmt: WHILE BO expression . BC stmtBlock
   95 lValue: expression . DOT IDENTIFIER
   96       | expression . SBO expression SBC
   98 call: expression . DOT IDENTIFIER BO actualList BC

    DOT  shift, and go to state 137
    SBO  shift, and go to state 138
    BC   shift, and go to state 186


State 156

   49 ifStmt: IF BO expression . BC stmtBlock optElse
   95 lValue: expression . DOT IDENTIFIER
   96       | expression . SBO expression SBC
   98 call: expression . DOT IDENTIFIER BO actualList BC

    DOT  shift, and go to state 137
    SBO  shift, and go to state 138
    BC   shift, and go to state 187


State 157

   54 returnStmt: RETURN expression SEMICOLON .

    $default  reduce using rule 54 (returnStmt)


State 158

   90 expressionI: NEW BO IDENTIFIER . BC

    BC  shift, and go to state 188


State 159

   59 expression: expressionA .
   60 expressionA: expressionA . EQUAL expressionA
   91 expressionI: NEWARRAY BO expressionA . COMMA type BC

    EQUAL  shift, and go to state 139
    COMMA  shift, and go to state 189

    $default  reduce using rule 59 (expression)


State 160

   56 printStmt: PRINT BO expressionList . BC SEMICOLON
   58 expressionList: expressionList . COMMA expression

    COMMA  shift, and go to state 190
    BC     shift, and go to state 191


State 161

   57 expressionList: expression .
   95 lValue: expression . DOT IDENTIFIER
   96       | expression . SBO expression SBC
   98 call: expression . DOT IDENTIFIER BO actualList BC

    DOT  shift, and go to state 137
    SBO  shift, and go to state 138

    $default  reduce using rule 57 (expressionList)


State 162

   88 expressionI: READINTEGER BO BC .

    $default  reduce using rule 88 (expressionI)


State 163

   89 expressionI: READLINE BO BC .

    $default  reduce using rule 89 (expressionI)


State 164

   93 expressionI: BO expressionA BC .

    $default  reduce using rule 93 (expressionI)


State 165

   95 lValue: expression . DOT IDENTIFIER
   96       | expression . SBO expression SBC
   98 call: expression . DOT IDENTIFIER BO actualList BC
  101 actuals: expression .

    DOT  shift, and go to state 137
    SBO  shift, and go to state 138

    $default  reduce using rule 101 (actuals)


State 166

   97 call: IDENTIFIER BO actualList . BC

    BC  shift, and go to state 192


State 167

   99 actualList: actuals .
  102 actuals: actuals . COMMA expression

    COMMA  shift, and go to state 193

    $default  reduce using rule 99 (actualList)


State 168

   95 lValue: expression DOT IDENTIFIER .
   98 call: expression DOT IDENTIFIER . BO actualList BC

    BO  shift, and go to state 194

    $default  reduce using rule 95 (lValue)


State 169

   95 lValue: expression . DOT IDENTIFIER
   96       | expression . SBO expression SBC
   96       | expression SBO expression . SBC
   98 call: expression . DOT IDENTIFIER BO actualList BC

    DOT  shift, and go to state 137
    SBO  shift, and go to state 138
    SBC  shift, and go to state 195


State 170

   59 expression: expressionA .
   60 expressionA: expressionA . EQUAL expressionA
   60            | expressionA EQUAL expressionA .

    EQUAL  shift, and go to state 139

    EQUAL     [reduce using rule 60 (expressionA)]
    DOT       reduce using rule 59 (expression)
    DOT       [reduce using rule 60 (expressionA)]
    SBO       reduce using rule 59 (expression)
    SBO       [reduce using rule 60 (expressionA)]
    $default  reduce using rule 60 (expressionA)


State 171

   62 expressionB: expressionB OR expressionC .
   63            | expressionC .
   64 expressionC: expressionC . AND expressionD

    EQUAL     reduce using rule 62 (expressionB)
    EQUAL     [reduce using rule 63 (expressionB)]
    OR        reduce using rule 62 (expressionB)
    OR        [reduce using rule 63 (expressionB)]
    DOT       reduce using rule 62 (expressionB)
    DOT       [reduce using rule 63 (expressionB)]
    SBO       reduce using rule 62 (expressionB)
    SBO       [reduce using rule 63 (expressionB)]
    $default  reduce using rule 62 (expressionB)


State 172

   64 expressionC: expressionC AND expressionD .
   65            | expressionD .
   66 expressionD: expressionD . EQUALEQUAL expressionE
   67            | expressionD . NOTEQUAL expressionE

    EQUALEQUAL  shift, and go to state 142
    NOTEQUAL    shift, and go to state 143

    EQUAL     reduce using rule 64 (expressionC)
    EQUAL     [reduce using rule 65 (expressionC)]
    AND       reduce using rule 64 (expressionC)
    AND       [reduce using rule 65 (expressionC)]
    OR        reduce using rule 64 (expressionC)
    OR        [reduce using rule 65 (expressionC)]
    DOT       reduce using rule 64 (expressionC)
    DOT       [reduce using rule 65 (expressionC)]
    SBO       reduce using rule 64 (expressionC)
    SBO       [reduce using rule 65 (expressionC)]
    $default  reduce using rule 64 (expressionC)


State 173

   66 expressionD: expressionD EQUALEQUAL expressionE .
   68            | expressionE .
   69 expressionE: expressionE . LESS expressionF
   70            | expressionE . LESSEQUAL expressionF
   71            | expressionE . GREATER expressionF
   72            | expressionE . GREATEREQUAL expressionF

    LESS          error (nonassociative)
    LESSEQUAL     error (nonassociative)
    GREATER       error (nonassociative)
    GREATEREQUAL  error (nonassociative)

    EQUALEQUAL  reduce using rule 66 (expressionD)
    EQUALEQUAL  [reduce using rule 68 (expressionD)]
    EQUAL       reduce using rule 66 (expressionD)
    EQUAL       [reduce using rule 68 (expressionD)]
    NOTEQUAL    reduce using rule 66 (expressionD)
    NOTEQUAL    [reduce using rule 68 (expressionD)]
    AND         reduce using rule 66 (expressionD)
    AND         [reduce using rule 68 (expressionD)]
    OR          reduce using rule 66 (expressionD)
    OR          [reduce using rule 68 (expressionD)]
    DOT         reduce using rule 66 (expressionD)
    DOT         [reduce using rule 68 (expressionD)]
    SBO         reduce using rule 66 (expressionD)
    SBO         [reduce using rule 68 (expressionD)]
    $default    reduce using rule 66 (expressionD)


State 174

   67 expressionD: expressionD NOTEQUAL expressionE .
   68            | expressionE .
   69 expressionE: expressionE . LESS expressionF
   70            | expressionE . LESSEQUAL expressionF
   71            | expressionE . GREATER expressionF
   72            | expressionE . GREATEREQUAL expressionF

    LESS          error (nonassociative)
    LESSEQUAL     error (nonassociative)
    GREATER       error (nonassociative)
    GREATEREQUAL  error (nonassociative)

    EQUALEQUAL  reduce using rule 67 (expressionD)
    EQUALEQUAL  [reduce using rule 68 (expressionD)]
    EQUAL       reduce using rule 67 (expressionD)
    EQUAL       [reduce using rule 68 (expressionD)]
    NOTEQUAL    reduce using rule 67 (expressionD)
    NOTEQUAL    [reduce using rule 68 (expressionD)]
    AND         reduce using rule 67 (expressionD)
    AND         [reduce using rule 68 (expressionD)]
    OR          reduce using rule 67 (expressionD)
    OR          [reduce using rule 68 (expressionD)]
    DOT         reduce using rule 67 (expressionD)
    DOT         [reduce using rule 68 (expressionD)]
    SBO         reduce using rule 67 (expressionD)
    SBO         [reduce using rule 68 (expressionD)]
    $default    reduce using rule 67 (expressionD)


State 175

   69 expressionE: expressionE LESS expressionF .
   73            | expressionF .
   74 expressionF: expressionF . PLUS expressionG
   75            | expressionF . MINUS expressionG

    LESS          reduce using rule 69 (expressionE)
    LESS          [reduce using rule 73 (expressionE)]
    LESSEQUAL     reduce using rule 69 (expressionE)
    LESSEQUAL     [reduce using rule 73 (expressionE)]
    GREATER       reduce using rule 69 (expressionE)
    GREATER       [reduce using rule 73 (expressionE)]
    GREATEREQUAL  reduce using rule 69 (expressionE)
    GREATEREQUAL  [reduce using rule 73 (expressionE)]
    EQUALEQUAL    reduce using rule 69 (expressionE)
    EQUALEQUAL    [reduce using rule 73 (expressionE)]
    EQUAL         reduce using rule 69 (expressionE)
    EQUAL         [reduce using rule 73 (expressionE)]
    NOTEQUAL      reduce using rule 69 (expressionE)
    NOTEQUAL      [reduce using rule 73 (expressionE)]
    AND           reduce using rule 69 (expressionE)
    AND           [reduce using rule 73 (expressionE)]
    OR            reduce using rule 69 (expressionE)
    OR            [reduce using rule 73 (expressionE)]
    DOT           reduce using rule 69 (expressionE)
    DOT           [reduce using rule 73 (expressionE)]
    SBO           reduce using rule 69 (expressionE)
    SBO           [reduce using rule 73 (expressionE)]
    $default      reduce using rule 69 (expressionE)


State 176

   70 expressionE: expressionE LESSEQUAL expressionF .
   73            | expressionF .
   74 expressionF: expressionF . PLUS expressionG
   75            | expressionF . MINUS expressionG

    LESS          reduce using rule 70 (expressionE)
    LESS          [reduce using rule 73 (expressionE)]
    LESSEQUAL     reduce using rule 70 (expressionE)
    LESSEQUAL     [reduce using rule 73 (expressionE)]
    GREATER       reduce using rule 70 (expressionE)
    GREATER       [reduce using rule 73 (expressionE)]
    GREATEREQUAL  reduce using rule 70 (expressionE)
    GREATEREQUAL  [reduce using rule 73 (expressionE)]
    EQUALEQUAL    reduce using rule 70 (expressionE)
    EQUALEQUAL    [reduce using rule 73 (expressionE)]
    EQUAL         reduce using rule 70 (expressionE)
    EQUAL         [reduce using rule 73 (expressionE)]
    NOTEQUAL      reduce using rule 70 (expressionE)
    NOTEQUAL      [reduce using rule 73 (expressionE)]
    AND           reduce using rule 70 (expressionE)
    AND           [reduce using rule 73 (expressionE)]
    OR            reduce using rule 70 (expressionE)
    OR            [reduce using rule 73 (expressionE)]
    DOT           reduce using rule 70 (expressionE)
    DOT           [reduce using rule 73 (expressionE)]
    SBO           reduce using rule 70 (expressionE)
    SBO           [reduce using rule 73 (expressionE)]
    $default      reduce using rule 70 (expressionE)


State 177

   71 expressionE: expressionE GREATER expressionF .
   73            | expressionF .
   74 expressionF: expressionF . PLUS expressionG
   75            | expressionF . MINUS expressionG

    LESS          reduce using rule 71 (expressionE)
    LESS          [reduce using rule 73 (expressionE)]
    LESSEQUAL     reduce using rule 71 (expressionE)
    LESSEQUAL     [reduce using rule 73 (expressionE)]
    GREATER       reduce using rule 71 (expressionE)
    GREATER       [reduce using rule 73 (expressionE)]
    GREATEREQUAL  reduce using rule 71 (expressionE)
    GREATEREQUAL  [reduce using rule 73 (expressionE)]
    EQUALEQUAL    reduce using rule 71 (expressionE)
    EQUALEQUAL    [reduce using rule 73 (expressionE)]
    EQUAL         reduce using rule 71 (expressionE)
    EQUAL         [reduce using rule 73 (expressionE)]
    NOTEQUAL      reduce using rule 71 (expressionE)
    NOTEQUAL      [reduce using rule 73 (expressionE)]
    AND           reduce using rule 71 (expressionE)
    AND           [reduce using rule 73 (expressionE)]
    OR            reduce using rule 71 (expressionE)
    OR            [reduce using rule 73 (expressionE)]
    DOT           reduce using rule 71 (expressionE)
    DOT           [reduce using rule 73 (expressionE)]
    SBO           reduce using rule 71 (expressionE)
    SBO           [reduce using rule 73 (expressionE)]
    $default      reduce using rule 71 (expressionE)


State 178

   72 expressionE: expressionE GREATEREQUAL expressionF .
   73            | expressionF .
   74 expressionF: expressionF . PLUS expressionG
   75            | expressionF . MINUS expressionG

    LESS          reduce using rule 72 (expressionE)
    LESS          [reduce using rule 73 (expressionE)]
    LESSEQUAL     reduce using rule 72 (expressionE)
    LESSEQUAL     [reduce using rule 73 (expressionE)]
    GREATER       reduce using rule 72 (expressionE)
    GREATER       [reduce using rule 73 (expressionE)]
    GREATEREQUAL  reduce using rule 72 (expressionE)
    GREATEREQUAL  [reduce using rule 73 (expressionE)]
    EQUALEQUAL    reduce using rule 72 (expressionE)
    EQUALEQUAL    [reduce using rule 73 (expressionE)]
    EQUAL         reduce using rule 72 (expressionE)
    EQUAL         [reduce using rule 73 (expressionE)]
    NOTEQUAL      reduce using rule 72 (expressionE)
    NOTEQUAL      [reduce using rule 73 (expressionE)]
    AND           reduce using rule 72 (expressionE)
    AND           [reduce using rule 73 (expressionE)]
    OR            reduce using rule 72 (expressionE)
    OR            [reduce using rule 73 (expressionE)]
    DOT           reduce using rule 72 (expressionE)
    DOT           [reduce using rule 73 (expressionE)]
    SBO           reduce using rule 72 (expressionE)
    SBO           [reduce using rule 73 (expressionE)]
    $default      reduce using rule 72 (expressionE)


State 179

   74 expressionF: expressionF PLUS expressionG .
   76            | expressionG .
   77 expressionG: expressionG . MUL expressionH
   78            | expressionG . DIV expressionH
   79            | expressionG . MOD expressionH

    MUL  shift, and go to state 150
    DIV  shift, and go to state 151
    MOD  shift, and go to state 152

    PLUS          reduce using rule 74 (expressionF)
    PLUS          [reduce using rule 76 (expressionF)]
    MINUS         reduce using rule 74 (expressionF)
    MINUS         [reduce using rule 76 (expressionF)]
    LESS          reduce using rule 74 (expressionF)
    LESS          [reduce using rule 76 (expressionF)]
    LESSEQUAL     reduce using rule 74 (expressionF)
    LESSEQUAL     [reduce using rule 76 (expressionF)]
    GREATER       reduce using rule 74 (expressionF)
    GREATER       [reduce using rule 76 (expressionF)]
    GREATEREQUAL  reduce using rule 74 (expressionF)
    GREATEREQUAL  [reduce using rule 76 (expressionF)]
    EQUALEQUAL    reduce using rule 74 (expressionF)
    EQUALEQUAL    [reduce using rule 76 (expressionF)]
    EQUAL         reduce using rule 74 (expressionF)
    EQUAL         [reduce using rule 76 (expressionF)]
    NOTEQUAL      reduce using rule 74 (expressionF)
    NOTEQUAL      [reduce using rule 76 (expressionF)]
    AND           reduce using rule 74 (expressionF)
    AND           [reduce using rule 76 (expressionF)]
    OR            reduce using rule 74 (expressionF)
    OR            [reduce using rule 76 (expressionF)]
    DOT           reduce using rule 74 (expressionF)
    DOT           [reduce using rule 76 (expressionF)]
    SBO           reduce using rule 74 (expressionF)
    SBO           [reduce using rule 76 (expressionF)]
    $default      reduce using rule 74 (expressionF)


State 180

   75 expressionF: expressionF MINUS expressionG .
   76            | expressionG .
   77 expressionG: expressionG . MUL expressionH
   78            | expressionG . DIV expressionH
   79            | expressionG . MOD expressionH

    MUL  shift, and go to state 150
    DIV  shift, and go to state 151
    MOD  shift, and go to state 152

    PLUS          reduce using rule 75 (expressionF)
    PLUS          [reduce using rule 76 (expressionF)]
    MINUS         reduce using rule 75 (expressionF)
    MINUS         [reduce using rule 76 (expressionF)]
    LESS          reduce using rule 75 (expressionF)
    LESS          [reduce using rule 76 (expressionF)]
    LESSEQUAL     reduce using rule 75 (expressionF)
    LESSEQUAL     [reduce using rule 76 (expressionF)]
    GREATER       reduce using rule 75 (expressionF)
    GREATER       [reduce using rule 76 (expressionF)]
    GREATEREQUAL  reduce using rule 75 (expressionF)
    GREATEREQUAL  [reduce using rule 76 (expressionF)]
    EQUALEQUAL    reduce using rule 75 (expressionF)
    EQUALEQUAL    [reduce using rule 76 (expressionF)]
    EQUAL         reduce using rule 75 (expressionF)
    EQUAL         [reduce using rule 76 (expressionF)]
    NOTEQUAL      reduce using rule 75 (expressionF)
    NOTEQUAL      [reduce using rule 76 (expressionF)]
    AND           reduce using rule 75 (expressionF)
    AND           [reduce using rule 76 (expressionF)]
    OR            reduce using rule 75 (expressionF)
    OR            [reduce using rule 76 (expressionF)]
    DOT           reduce using rule 75 (expressionF)
    DOT           [reduce using rule 76 (expressionF)]
    SBO           reduce using rule 75 (expressionF)
    SBO           [reduce using rule 76 (expressionF)]
    $default      reduce using rule 75 (expressionF)


State 181

   77 expressionG: expressionG MUL expressionH .
   80            | expressionH .

    PLUS          reduce using rule 77 (expressionG)
    PLUS          [reduce using rule 80 (expressionG)]
    MINUS         reduce using rule 77 (expressionG)
    MINUS         [reduce using rule 80 (expressionG)]
    MUL           reduce using rule 77 (expressionG)
    MUL           [reduce using rule 80 (expressionG)]
    DIV           reduce using rule 77 (expressionG)
    DIV           [reduce using rule 80 (expressionG)]
    MOD           reduce using rule 77 (expressionG)
    MOD           [reduce using rule 80 (expressionG)]
    LESS          reduce using rule 77 (expressionG)
    LESS          [reduce using rule 80 (expressionG)]
    LESSEQUAL     reduce using rule 77 (expressionG)
    LESSEQUAL     [reduce using rule 80 (expressionG)]
    GREATER       reduce using rule 77 (expressionG)
    GREATER       [reduce using rule 80 (expressionG)]
    GREATEREQUAL  reduce using rule 77 (expressionG)
    GREATEREQUAL  [reduce using rule 80 (expressionG)]
    EQUALEQUAL    reduce using rule 77 (expressionG)
    EQUALEQUAL    [reduce using rule 80 (expressionG)]
    EQUAL         reduce using rule 77 (expressionG)
    EQUAL         [reduce using rule 80 (expressionG)]
    NOTEQUAL      reduce using rule 77 (expressionG)
    NOTEQUAL      [reduce using rule 80 (expressionG)]
    AND           reduce using rule 77 (expressionG)
    AND           [reduce using rule 80 (expressionG)]
    OR            reduce using rule 77 (expressionG)
    OR            [reduce using rule 80 (expressionG)]
    DOT           reduce using rule 77 (expressionG)
    DOT           [reduce using rule 80 (expressionG)]
    SBO           reduce using rule 77 (expressionG)
    SBO           [reduce using rule 80 (expressionG)]
    $default      reduce using rule 77 (expressionG)


State 182

   78 expressionG: expressionG DIV expressionH .
   80            | expressionH .

    PLUS          reduce using rule 78 (expressionG)
    PLUS          [reduce using rule 80 (expressionG)]
    MINUS         reduce using rule 78 (expressionG)
    MINUS         [reduce using rule 80 (expressionG)]
    MUL           reduce using rule 78 (expressionG)
    MUL           [reduce using rule 80 (expressionG)]
    DIV           reduce using rule 78 (expressionG)
    DIV           [reduce using rule 80 (expressionG)]
    MOD           reduce using rule 78 (expressionG)
    MOD           [reduce using rule 80 (expressionG)]
    LESS          reduce using rule 78 (expressionG)
    LESS          [reduce using rule 80 (expressionG)]
    LESSEQUAL     reduce using rule 78 (expressionG)
    LESSEQUAL     [reduce using rule 80 (expressionG)]
    GREATER       reduce using rule 78 (expressionG)
    GREATER       [reduce using rule 80 (expressionG)]
    GREATEREQUAL  reduce using rule 78 (expressionG)
    GREATEREQUAL  [reduce using rule 80 (expressionG)]
    EQUALEQUAL    reduce using rule 78 (expressionG)
    EQUALEQUAL    [reduce using rule 80 (expressionG)]
    EQUAL         reduce using rule 78 (expressionG)
    EQUAL         [reduce using rule 80 (expressionG)]
    NOTEQUAL      reduce using rule 78 (expressionG)
    NOTEQUAL      [reduce using rule 80 (expressionG)]
    AND           reduce using rule 78 (expressionG)
    AND           [reduce using rule 80 (expressionG)]
    OR            reduce using rule 78 (expressionG)
    OR            [reduce using rule 80 (expressionG)]
    DOT           reduce using rule 78 (expressionG)
    DOT           [reduce using rule 80 (expressionG)]
    SBO           reduce using rule 78 (expressionG)
    SBO           [reduce using rule 80 (expressionG)]
    $default      reduce using rule 78 (expressionG)


State 183

   79 expressionG: expressionG MOD expressionH .
   80            | expressionH .

    PLUS          reduce using rule 79 (expressionG)
    PLUS          [reduce using rule 80 (expressionG)]
    MINUS         reduce using rule 79 (expressionG)
    MINUS         [reduce using rule 80 (expressionG)]
    MUL           reduce using rule 79 (expressionG)
    MUL           [reduce using rule 80 (expressionG)]
    DIV           reduce using rule 79 (expressionG)
    DIV           [reduce using rule 80 (expressionG)]
    MOD           reduce using rule 79 (expressionG)
    MOD           [reduce using rule 80 (expressionG)]
    LESS          reduce using rule 79 (expressionG)
    LESS          [reduce using rule 80 (expressionG)]
    LESSEQUAL     reduce using rule 79 (expressionG)
    LESSEQUAL     [reduce using rule 80 (expressionG)]
    GREATER       reduce using rule 79 (expressionG)
    GREATER       [reduce using rule 80 (expressionG)]
    GREATEREQUAL  reduce using rule 79 (expressionG)
    GREATEREQUAL  [reduce using rule 80 (expressionG)]
    EQUALEQUAL    reduce using rule 79 (expressionG)
    EQUALEQUAL    [reduce using rule 80 (expressionG)]
    EQUAL         reduce using rule 79 (expressionG)
    EQUAL         [reduce using rule 80 (expressionG)]
    NOTEQUAL      reduce using rule 79 (expressionG)
    NOTEQUAL      [reduce using rule 80 (expressionG)]
    AND           reduce using rule 79 (expressionG)
    AND           [reduce using rule 80 (expressionG)]
    OR            reduce using rule 79 (expressionG)
    OR            [reduce using rule 80 (expressionG)]
    DOT           reduce using rule 79 (expressionG)
    DOT           [reduce using rule 80 (expressionG)]
    SBO           reduce using rule 79 (expressionG)
    SBO           [reduce using rule 80 (expressionG)]
    $default      reduce using rule 79 (expressionG)


State 184

   59 expression: expressionA .
   60 expressionA: expressionA . EQUAL expressionA
   84 expressionI: lValue EQUAL expressionA .

    EQUAL  shift, and go to state 139

    EQUAL     [reduce using rule 84 (expressionI)]
    DOT       reduce using rule 59 (expression)
    DOT       [reduce using rule 84 (expressionI)]
    SBO       reduce using rule 59 (expression)
    SBO       [reduce using rule 84 (expressionI)]
    $default  reduce using rule 84 (expressionI)


State 185

   53 forStmt: FOR BO expression SEMICOLON . expression SEMICOLON expression BC stmtBlock

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 196
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 112
    expressionG  go to state 113
    expressionH  go to state 114
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 186

   52 whileStmt: WHILE BO expression BC . stmtBlock

    CBO  shift, and go to state 58

    stmtBlock  go to state 197


State 187

   49 ifStmt: IF BO expression BC . stmtBlock optElse

    CBO  shift, and go to state 58

    stmtBlock  go to state 198


State 188

   90 expressionI: NEW BO IDENTIFIER BC .

    $default  reduce using rule 90 (expressionI)


State 189

   91 expressionI: NEWARRAY BO expressionA COMMA . type BC

    INT         shift, and go to state 2
    DOUBLE      shift, and go to state 3
    BOOL        shift, and go to state 4
    STRING      shift, and go to state 5
    IDENTIFIER  shift, and go to state 8

    type  go to state 199


State 190

   58 expressionList: expressionList COMMA . expression

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 200
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 112
    expressionG  go to state 113
    expressionH  go to state 114
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 191

   56 printStmt: PRINT BO expressionList BC . SEMICOLON

    SEMICOLON  shift, and go to state 201


State 192

   97 call: IDENTIFIER BO actualList BC .

    $default  reduce using rule 97 (call)


State 193

  102 actuals: actuals COMMA . expression

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 202
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 112
    expressionG  go to state 113
    expressionH  go to state 114
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 194

   98 call: expression DOT IDENTIFIER BO . actualList BC

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    $default  reduce using rule 100 (actualList)

    expression   go to state 165
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 112
    expressionG  go to state 113
    expressionH  go to state 114
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    actualList   go to state 203
    actuals      go to state 167
    constant     go to state 118


State 195

   96 lValue: expression SBO expression SBC .

    $default  reduce using rule 96 (lValue)


State 196

   53 forStmt: FOR BO expression SEMICOLON expression . SEMICOLON expression BC stmtBlock
   95 lValue: expression . DOT IDENTIFIER
   96       | expression . SBO expression SBC
   98 call: expression . DOT IDENTIFIER BO actualList BC

    SEMICOLON  shift, and go to state 204
    DOT        shift, and go to state 137
    SBO        shift, and go to state 138


State 197

   52 whileStmt: WHILE BO expression BC stmtBlock .

    $default  reduce using rule 52 (whileStmt)


State 198

   49 ifStmt: IF BO expression BC stmtBlock . optElse

    ELSE  shift, and go to state 205

    $default  reduce using rule 50 (optElse)

    optElse  go to state 206


State 199

   91 expressionI: NEWARRAY BO expressionA COMMA type . BC

    BC  shift, and go to state 207


State 200

   58 expressionList: expressionList COMMA expression .
   95 lValue: expression . DOT IDENTIFIER
   96       | expression . SBO expression SBC
   98 call: expression . DOT IDENTIFIER BO actualList BC

    DOT  shift, and go to state 137
    SBO  shift, and go to state 138

    $default  reduce using rule 58 (expressionList)


State 201

   56 printStmt: PRINT BO expressionList BC SEMICOLON .

    $default  reduce using rule 56 (printStmt)


State 202

   95 lValue: expression . DOT IDENTIFIER
   96       | expression . SBO expression SBC
   98 call: expression . DOT IDENTIFIER BO actualList BC
  102 actuals: actuals COMMA expression .

    DOT  shift, and go to state 137
    SBO  shift, and go to state 138

    $default  reduce using rule 102 (actuals)


State 203

   98 call: expression DOT IDENTIFIER BO actualList . BC

    BC  shift, and go to state 208


State 204

   53 forStmt: FOR BO expression SEMICOLON expression SEMICOLON . expression BC stmtBlock

    _NULL         shift, and go to state 76
    THIS          shift, and go to state 77
    NEW           shift, and go to state 83
    NEWARRAY      shift, and go to state 84
    READINTEGER   shift, and go to state 86
    READLINE      shift, and go to state 87
    _TRUE         shift, and go to state 88
    _FALSE        shift, and go to state 89
    MINUS         shift, and go to state 90
    NOT           shift, and go to state 91
    BO            shift, and go to state 92
    INT_VALUE     shift, and go to state 94
    DOUBLE_VALUE  shift, and go to state 95
    STRING_VALUE  shift, and go to state 96
    IDENTIFIER    shift, and go to state 97

    expression   go to state 209
    expressionA  go to state 107
    expressionB  go to state 108
    expressionC  go to state 109
    expressionD  go to state 110
    expressionE  go to state 111
    expressionF  go to state 112
    expressionG  go to state 113
    expressionH  go to state 114
    expressionI  go to state 115
    lValue       go to state 116
    call         go to state 117
    constant     go to state 118


State 205

   51 optElse: ELSE . stmtBlock

    CBO  shift, and go to state 58

    stmtBlock  go to state 210


State 206

   49 ifStmt: IF BO expression BC stmtBlock optElse .

    $default  reduce using rule 49 (ifStmt)


State 207

   91 expressionI: NEWARRAY BO expressionA COMMA type BC .

    $default  reduce using rule 91 (expressionI)


State 208

   98 call: expression DOT IDENTIFIER BO actualList BC .

    $default  reduce using rule 98 (call)


State 209

   53 forStmt: FOR BO expression SEMICOLON expression SEMICOLON expression . BC stmtBlock
   95 lValue: expression . DOT IDENTIFIER
   96       | expression . SBO expression SBC
   98 call: expression . DOT IDENTIFIER BO actualList BC

    DOT  shift, and go to state 137
    SBO  shift, and go to state 138
    BC   shift, and go to state 211


State 210

   51 optElse: ELSE stmtBlock .

    $default  reduce using rule 51 (optElse)


State 211

   53 forStmt: FOR BO expression SEMICOLON expression SEMICOLON expression BC . stmtBlock

    CBO  shift, and go to state 58

    stmtBlock  go to state 212


State 212

   53 forStmt: FOR BO expression SEMICOLON expression SEMICOLON expression BC stmtBlock .

    $default  reduce using rule 53 (forStmt)
